#!/usr/bin/env python3
import sys
# import glob
# import shutil
import subprocess
import os
#import git
mandatoryArgs = 1

# def getGitRepository(path):
#         git_repo = git.Repo(path, search_parent_directories=True)
#         return git_repo
    
# def getGitRoot(path):
#         git_repo = getGitRepository()
#         git_root = git_repo.git.rev_parse("--show-toplevel")
#         return git_root

def runGit(args):
    cmd = ['git']
    return subprocess.run(cmd+args, stdout=subprocess.PIPE).stdout.decode('utf-8')

def decodeLine(line):
    if line[0]=='\"' : 
        line = line.lstrip('\"').rstrip('\"')
        line = line.encode('ascii').decode('unicode_escape').encode('latin1').decode('utf8')
    return line

def multilineStringToList(string):
    if string=='': return []
    lst = list(string.split('\n'))
    i = 0
    for l in lst:
        lst[i] = decodeLine(l)
        i += 1
    return lst

def getListModifiedFiles():
    ret = runGit(['ls-files','--modified'])
    return multilineStringToList(ret[:-1])

def getListTrackedFiles():
    ret = runGit(['ls-files'])
    return multilineStringToList(ret[:-1])

def getListUntrackedFiles():
    ret = runGit(['ls-files','--others'])
    l = multilineStringToList(ret[:-1])
    return [x for x in l if not '/' in x]

def ListTrackedFiles():
    lst = getListTrackedFiles()
    print("List of files:");
    for l in lst:
        print("->",l)
    if (len(lst) > 1):
        print("\n%g files tracked"%(len(lst)))
    else:
        print("\n%g file tracked"%(len(lst)))
        
def ListUntrackedFiles():
    lst = getListUntrackedFiles()
    print("List of files:");
    for l in lst:
        print("->",l)
    if (len(lst) > 1):
        print("\n%g files untracked"%(len(lst)))
    else:
        print("\n%g file untracked"%(len(lst)))
        
def ListModifiedFiles():
    lst = getListModifiedFiles()
    print("List of files:");
    for l in lst:
        print("->",l)
    if (len(lst) > 1):
        print("\n%g files modified"%(len(lst)))
    else:
        print("\n%g file modified"%(len(lst)))
        if (len(lst) == 0):
            print('Everything is up to date')

def AddFiles():
    lst = getListModifiedFiles()
    if (len(lst)>1):
        print("%g files to update"%(len(lst)))
    else:
        print("%g file to update"%(len(lst)))
        if (len(lst) == 0):
            print('Everything is up to date')
    for l in lst:
        runGit(['add', l])
        print('add ->',l)
       
# --------------------------------------------------------    
# Start of the main program
# --------------------------------------------------------    
print ("mygit")
print ("(c) by Olivier PantalÃ© 2020")
print ("")  

if (len(sys.argv) > mandatoryArgs):
    # get the current directory
    curDir = os.getcwd()
    key = sys.argv[1]
    executed = False
    if (key == 'tracked'): 
        ListTrackedFiles()
        executed = True
    if (key == 'untracked'): 
        ListUntrackedFiles()
        executed = True
    if (key == 'modified' or key == 'mod'): 
        ListModifiedFiles()
        executed = True
    if (key == 'add'): 
        AddFiles()
        executed = True
    if (not executed):
        print("Error : unknown command :", key)
    # filenames = glob.glob(pattern)
    # if (len(sys.argv) > mandatoryArgs+1):
    #     if '--backup' in sys.argv[mandatoryArgs+1:]:
    #         BackupFile(filenames)
    # ReplaceInFile(filenames, oldstring, newstring)
else:
    print ("Usage is the following:")
    print ("    mygit action [options]")
    print ("actions:")
    print ("    add       : add all modified files")
    print ("    modified  : list of modified files (short mod")
    print ("    tracked   : list of files under control")
    print ("    untracked : list of files not under control")
